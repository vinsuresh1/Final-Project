
import java.awt.Button;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

import javax.swing.ImageIcon;
import javax.swing.JPanel;
import javax.swing.Timer;

public class GameWindow extends JPanel implements ActionListener {

    private final int WIDTH = 500;
    private final int HEIGHT = 500;
    private final int DOT_SIZE = 10;
    private final int ALL_DOTS = 2500;
    private final int RAND_POS = 29;
    private int TIME = 40;

    private final int x[] = new int[ALL_DOTS];
    private final int y[] = new int[ALL_DOTS];

    private int dots;
    private int cherry_x=600;
    private int cherry_y=600;
    
    private Button b= new Button("Beginner");
    private Button i= new Button("Intermediate");
	private Button p= new Button("Expert");
    
    private boolean inGame = true;
    
    private int score = 0;
    
    private KeyController keyController = new KeyController();
    
    private Timer timer;
    private Image orange;
    private Image cherry;
    private Image head;
    
 
    public GameWindow() {
    	//inGame= false;
        
    	addKeyListener(keyController);
        setBackground(Color.cyan);
        setFocusable(true);

        setPreferredSize(new Dimension(WIDTH, HEIGHT));
        loadImages();
        
        //adds beginner, intermediate, and expert modes
        b.setFocusable(false);
        b.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				TIME = 140;
				initGame();
			}
		});
        add(b);
        
        i.setFocusable(false);
        i.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				TIME = 100;
				initGame();
			}
		});
        add(i);
        
        p.setFocusable(false);
        p.addActionListener(new ActionListener() {
        	@Override
        	public void actionPerformed(ActionEvent e) {
        		TIME = 60;
        		initGame();
        	}
        });
        add(p);
    }
    
    private void getRidOfButtons () {
    	this.remove(b);
    	remove(i);
    	remove(p);
    	//remove other buttons
    }

    private void loadImages() {

        ImageIcon iid = new ImageIcon("Images/orange.png");
        orange = iid.getImage();

        ImageIcon iia = new ImageIcon("Images/cherries.png");
        cherry = iia.getImage();

        ImageIcon iih = new ImageIcon("Images/WillFace.png");
        head = iih.getImage();
    }

    private void initGame() {
    	getRidOfButtons();
        dots = 3;
        inGame = true;
        
        for (int z = 0; z < dots; z++) {
            x[z] = 50 - z * 10;
            y[z] = 50;
        }

        locateCherry();

        timer = new Timer(TIME, this);
        timer.start();
    }

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);

        draw(g);
    }
    
    private void draw(Graphics g) {
 
        if (inGame) {

            g.drawImage(cherry, cherry_x, cherry_y, this);

            for (int z = 0; z < dots; z++) {
                if (z == 0) {
                    g.drawImage(head, x[z], y[z], this);
                } else {
                    g.drawImage(orange, x[z], y[z], this);
                }
            }
            
            // Score on top
            //g.setFont....
            g.drawString(Integer.toString(score), 475, 475);

            Toolkit.getDefaultToolkit().sync();

        } else {

            gameOver(g);
        }        
    }

    private void gameOver(Graphics g) {
        
        String msg = "Game Over";
        Font font = new Font("Helvetica", Font.BOLD, 20);
        FontMetrics metr = getFontMetrics(font);

        g.setColor(Color.black);
        g.setFont(font);
        g.drawString(msg, (WIDTH - metr.stringWidth(msg)) / 2, HEIGHT / 2);
    }

    private void checkCherry() {

        if ((x[0] == cherry_x) && (y[0] == cherry_y)) {
        	// He ate the cherry
        	score += 10;
        	TIME-=10;
        	if (TIME<30)
        	{
        		TIME=30;
        	}
        	timer.setDelay(TIME);
        	
            dots++;
            locateCherry();
        }
    }

    private void move() {

        for (int z = dots; z > 0; z--) {
            x[z] = x[(z - 1)];
            y[z] = y[(z - 1)];
        }

        if (keyController.leftDirection()) {
            x[0] -= DOT_SIZE;
        }

        if (keyController.rightDirection()) {
            x[0] += DOT_SIZE;
        }

        if (keyController.upDirection()) {
            y[0] -= DOT_SIZE;
        }

        if (keyController.downDirection()) {
            y[0] += DOT_SIZE;
        }
    }

    private void checkCollision() {

        for (int z = dots; z > 0; z--) {

            if ((z > 4) && (x[0] == x[z]) && (y[0] == y[z])) {
                inGame = false;
            }
        }

        if (y[0] >= HEIGHT) {
            inGame = false;
        }

        if (y[0] < 0) {
            inGame = false;
        }

        if (x[0] >= WIDTH) {
            inGame = false;
        }

        if (x[0] < 0) {
            inGame = false;
        }
        
        if(!inGame) {
            timer.stop();
        }
    }

    /**
     * Repositions cherry
     */
    private void locateCherry() {

        int x = (int) (Math.random() * RAND_POS);
        cherry_x = ((x * DOT_SIZE));

        x = (int) (Math.random() * RAND_POS);
        cherry_y = ((x * DOT_SIZE));
    }

    @Override
    public void actionPerformed(ActionEvent e) {

        if (inGame) {

            checkCherry();
            checkCollision();
            move();
        }

        repaint();
    }

    
}
